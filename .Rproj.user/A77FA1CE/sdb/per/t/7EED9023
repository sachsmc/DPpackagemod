{
    "collab_server" : "",
    "contents" : "library(rjags)\n\n\n## full measurement error model\nmodel_string <- \"model{\n\n# Likelihood\nfor(i in 1:n){\nY[i]   ~ dnorm(mu[i],inv.var)\nmu[i] <- beta[1] + beta[2]*X[i]\nX[i] ~ dnorm(jqe * X2[i], xvar)\n#X2[i] ~ dnorm(mux, varx)\n}\n\njqe <- .8\nxvar <- pow(.2, -2)\n\n# Prior for beta\nfor(j in 1:2){\nbeta[j] ~ dnorm(0,0.0001)\n}\n\n# Prior for the inverse variance\ninv.var   ~ dgamma(0.01, 0.01)\nmux ~ dnorm(0.0, 0.001)\nvarx ~ dgamma(0.01, 0.01)\n# inv.det   ~ dgamma(0.01, 0.01)\nsigma     <- 1/sqrt(inv.var)\n\n}\"\n\n## partial measurement error, will sample Xs outside\nmodel_string2 <- \"model{\n\n# Likelihood\nfor(i in 1:n){\nY[i]   ~ dnorm(mu[i],inv.var)\nmu[i] <- beta[1] + beta[2] * X[i]\n}\n\n# Prior for beta\nfor(j in 1:2){\nbeta[j] ~ dnorm(0.0,0.001)\n}\n\n# Prior for the inverse variance\ninv.var   ~ dgamma(0.01, 0.01)\ninv.tau   ~ dgamma(0.01, 0.01)\neta ~ dnorm(0.0, 0.001)\n\ninv.det   ~ dgamma(0.01, 0.01)\nsigma     <- 1/sqrt(inv.var)\n\n}\"\n\n\nrun.comp <- function(n, B = 500) {\n  X <- rnorm(n)\n  X2 <- X + rnorm(n, mean = 0, sd = 0.5) ## observed\n  \n  Y <- 1 + 2.5 * X + rnorm(n)\n  \n\n  model <- jags.model(textConnection(model_string), \n                      data = list(Y = Y, n = length(Y), X2 = X2), quiet = TRUE)\n  \n  \n  update(model, 1000, progress.bar = \"none\")\n  \n  samp0 <- coda.samples(\n    model,\n    variable.names = c(\"beta\"),\n    n.iter = 50000, thin = 10,\n    progress.bar = \"none\"\n  )\n  \n  res.full <- colMeans(samp0[[1]])\n  \n  samp.in <- matrix(NA, ncol = 2, nrow = B)\n  X.out <- matrix(NA, ncol = n, nrow = B + 1)\n  j <- 1\n  X.in <- X2 #rnorm(n, mean = 0.8 * X2, sd = (0.2))\n  X.out[1, ] <- X.in\n  \n  for (i in 1:B) {\n    \n    model <- jags.model(textConnection(model_string2),\n                        data = list(Y = c(Y, rep(NA, 20)), n = 2 * length(Y), \n                                    X = c(X.out[i, ], X.out[i, ])), quiet = TRUE)\n    \n    update(model, 5000, progress.bar = \"none\")\n    \n    samp <- coda.samples(\n      model,\n      variable.names = c(\"Y\"),\n      n.iter = 1000, thin = 1,\n      progress.bar = \"none\"\n    )\n    mus <- colMeans(samp[[1]][, paste0(\"Y[\", 21:40, \"]\")])\n    \n   \n    model2 <- jags.model(textConnection(model_string2),\n                         data = list(Y = c(X.out[i, ], rep(NA, 20)), n = 2 * length(Y), \n                                     X = c(mus, mus)), quiet = TRUE)\n    \n    \n    update(model, 5000, progress.bar = \"none\")\n    \n    samp <- coda.samples(\n      model,\n      variable.names = c(\"Y\"),\n      n.iter = 1000, thin = 1,\n      progress.bar = \"none\"\n    )\n    \n    X.out[i + 1, ] <- colMeans(samp[[1]][, paste0(\"Y[\", 21:40, \"]\")])\n    \n    closeAllConnections()\n  }\n  \n  model <- jags.model(textConnection(model_string2),\n                      data = list(Y = Y, n = length(Y), \n                                  X = X.out[i + 1, ]), quiet = TRUE)\n  \n  update(model, 5000, progress.bar = \"none\")\n  \n  samp <- coda.samples(\n    model,\n    variable.names = c(\"beta\"),\n    n.iter = 5000, thin = 5,\n    progress.bar = \"none\"\n  )\n  \n  res.in <- colMeans( samp[[1]][, c(\"beta[1]\", \"beta[2]\")])\n  res.std <- lm(Y ~ X2)$coefficients\n  \n  c(res.full, res.in, res.std)\n  }\n\nsimit1 <- replicate(10, run.comp(20, B = 500))\nsimit2 <- as.data.frame(t(simit1))\n\nplot(simit2[, 2] ~ simit2[, 4], xlab = \"our proposal\", ylab = \"full measurement err. mod.\")\nabline(a = 0, b = 1)\nabline(v = 2.5, h = 2.5)\n\nsummary(simit2)\n\nhist(simit2[, 2] )\nhist(simit2[, 4] )\nhist(simit2[, 6] )\n",
    "created" : 1493110788963.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1330520429",
    "id" : "7EED9023",
    "lastKnownWriteTime" : 1490856100,
    "last_content_update" : 1490856100,
    "path" : "G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Code/Measurement error/simple-sim-2017-03-30.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}